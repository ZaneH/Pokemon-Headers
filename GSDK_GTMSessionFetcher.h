//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSURLSessionDelegate.h"

@class NSArray, NSData, NSDate, NSDictionary, NSError, NSHTTPCookieStorage, NSMutableData, NSMutableDictionary, NSMutableURLRequest, NSObject<OS_dispatch_group>, NSObject<OS_dispatch_queue>, NSOperationQueue, NSString, NSTimer, NSURL, NSURLCredential, NSURLResponse, NSURLSession, NSURLSessionConfiguration, NSURLSessionTask;

@interface GSDK_GTMSessionFetcher : NSObject <NSURLSessionDelegate>
{
    NSMutableURLRequest *_request;
    NSURLSession *_session;
    _Bool _shouldInvalidateSession;
    NSURLSession *_sessionNeedingInvalidation;
    NSURLSessionConfiguration *_configuration;
    NSURLSessionTask *_sessionTask;
    NSString *_taskDescription;
    float _taskPriority;
    NSURLResponse *_response;
    NSString *_sessionIdentifier;
    _Bool _wasCreatedFromBackgroundSession;
    _Bool _didCreateSessionIdentifier;
    NSString *_sessionIdentifierUUID;
    _Bool _userRequestedBackgroundSession;
    _Bool _usingBackgroundSession;
    NSMutableData *_downloadedData;
    NSError *_downloadFinishedError;
    NSData *_downloadResumeData;
    NSURL *_destinationFileURL;
    long long _downloadedLength;
    NSURLCredential *_credential;
    NSURLCredential *_proxyCredential;
    _Bool _isStopNotificationNeeded;
    _Bool _isUsingTestBlock;
    id _userData;
    NSMutableDictionary *_properties;
    NSObject<OS_dispatch_queue> *_callbackQueue;
    NSObject<OS_dispatch_group> *_callbackGroup;
    NSOperationQueue *_delegateQueue;
    id <GTMFetcherAuthorizationProtocol> _authorizer;
    id <GTMSessionFetcherServiceProtocol> _service;
    NSString *_serviceHost;
    long long _servicePriority;
    _Bool _userStoppedFetching;
    _Bool _isRetryEnabled;
    NSTimer *_retryTimer;
    unsigned long long _retryCount;
    double _maxRetryInterval;
    double _minRetryInterval;
    double _retryFactor;
    double _lastRetryInterval;
    NSDate *_initialBeginFetchDate;
    NSDate *_initialRequestDate;
    _Bool _hasAttemptedAuthRefresh;
    NSString *_comment;
    NSString *_log;
    NSMutableData *_loggedStreamData;
    NSURL *_redirectedFromURL;
    NSString *_logRequestBody;
    NSString *_logResponseBody;
    _Bool _hasLoggedError;
    _Bool _deferResponseBodyLogging;
    _Bool _canShareSession;
    _Bool _useUploadTask;
    _Bool _allowLocalhostRequest;
    _Bool _allowInvalidServerCertificates;
    id _configurationBlock;
    NSDictionary *_sessionUserInfo;
    id _completionHandler;
    NSData *_bodyData;
    NSURL *_bodyFileURL;
    long long _bodyLength;
    id _bodyStreamProvider;
    id _accumulateDataBlock;
    id _receivedProgressBlock;
    id _downloadProgressBlock;
    id _resumeDataBlock;
    id _didReceiveResponseBlock;
    id _willRedirectBlock;
    id _sendProgressBlock;
    id _willCacheURLResponseBlock;
    id _retryBlock;
    NSArray *_allowedInsecureSchemes;
    NSHTTPCookieStorage *_cookieStorage;
    id _testBlock;
    unsigned long long _backgroundTaskIdentifier;
}

+ (id)activePersistedBackgroundSessions;
+ (_Bool)appAllowsInsecureRequests;
+ (void)application:(id)arg1 handleEventsForBackgroundURLSession:(id)arg2 completionHandler:(id)arg3;
+ (id)fetcherUserDefaults;
+ (id)fetcherWithDownloadResumeData:(id)arg1;
+ (id)fetcherWithRequest:(id)arg1;
+ (id)fetcherWithSessionIdentifier:(id)arg1;
+ (id)fetcherWithURL:(id)arg1;
+ (id)fetcherWithURLString:(id)arg1;
+ (id)fetchersForBackgroundSessions;
+ (void)load;
+ (id)sessionIdentifierToFetcherMap;
+ (void)setGlobalTestBlock:(id)arg1;
+ (void)setSystemCompletionHandler:(id)arg1 forSessionIdentifier:(id)arg2;
+ (id)staticCookieStorage;
+ (id)systemCompletionHandlerForSessionIdentifier:(id)arg1;
- (void).cxx_destruct;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didBecomeDownloadTask:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(id)arg4;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 willCacheResponse:(id)arg3 completionHandler:(id)arg4;
- (void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didResumeAtOffset:(long long)arg3 expectedTotalBytes:(long long)arg4;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 didReceiveChallenge:(id)arg3 completionHandler:(id)arg4;
- (void)URLSession:(id)arg1 task:(id)arg2 didSendBodyData:(long long)arg3 totalBytesSent:(long long)arg4 totalBytesExpectedToSend:(long long)arg5;
- (void)URLSession:(id)arg1 task:(id)arg2 needNewBodyStream:(id)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 willPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4 completionHandler:(id)arg5;
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(id)arg1;
@property(copy) id accumulateDataBlock; // @synthesize accumulateDataBlock=_accumulateDataBlock;
- (void)addPersistedBackgroundSessionToDefaults;
- (void)addPropertiesFromDictionary:(id)arg1;
@property _Bool allowInvalidServerCertificates; // @synthesize allowInvalidServerCertificates=_allowInvalidServerCertificates;
@property _Bool allowLocalhostRequest; // @synthesize allowLocalhostRequest=_allowLocalhostRequest;
@property(copy) NSArray *allowedInsecureSchemes; // @synthesize allowedInsecureSchemes=_allowedInsecureSchemes;
- (void)appendLoggedStreamData:(id)arg1;
- (void)authorizeRequest;
@property(retain) id <GTMFetcherAuthorizationProtocol> authorizer; // @synthesize authorizer=_authorizer;
- (void)authorizer:(id)arg1 request:(id)arg2 finishedWithError:(id)arg3;
@property unsigned long long backgroundTaskIdentifier; // @synthesize backgroundTaskIdentifier=_backgroundTaskIdentifier;
- (void)beginFetchMayDelay:(_Bool)arg1 mayAuthorize:(_Bool)arg2;
- (void)beginFetchWithCompletionHandler:(id)arg1;
- (void)beginFetchWithDelegate:(id)arg1 didFinishSelector:(SEL)arg2;
- (void)beginRetryTimer;
@property(retain) NSData *bodyData; // @synthesize bodyData=_bodyData;
@property(retain) NSURL *bodyFileURL; // @synthesize bodyFileURL=_bodyFileURL;
@property(readonly) long long bodyLength; // @synthesize bodyLength=_bodyLength;
@property(copy) id bodyStreamProvider; // @synthesize bodyStreamProvider=_bodyStreamProvider;
@property(retain) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;
- (_Bool)canFetchWithBackgroundSession;
@property(readonly) _Bool canShareSession; // @synthesize canShareSession=_canShareSession;
- (void)clearLoggedStreamData;
@property(copy) NSString *comment; // @synthesize comment=_comment;
@property(copy) id completionHandler; // @synthesize completionHandler=_completionHandler;
- (id)completionHandlerWithTarget:(id)arg1 didFinishSelector:(SEL)arg2;
@property(retain) NSURLSessionConfiguration *configuration; // @synthesize configuration=_configuration;
@property(copy) id configurationBlock; // @synthesize configurationBlock=_configurationBlock;
@property(retain) NSHTTPCookieStorage *cookieStorage; // @synthesize cookieStorage=_cookieStorage;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)createSessionIdentifierWithMetadata:(id)arg1;
@property(retain) NSURLCredential *credential; // @synthesize credential=_credential;
- (void)dealloc;
@property _Bool deferResponseBodyLogging;
@property(readonly, copy) NSString *description;
@property(retain) NSURL *destinationFileURL;
- (void)destroyRetryTimer;
@property(copy) id didReceiveResponseBlock; // @synthesize didReceiveResponseBlock=_didReceiveResponseBlock;
@property(copy) id downloadProgressBlock; // @synthesize downloadProgressBlock=_downloadProgressBlock;
@property(retain) NSData *downloadResumeData; // @synthesize downloadResumeData=_downloadResumeData;
@property(retain) NSData *downloadedData;
@property(readonly) long long downloadedLength; // @synthesize downloadedLength=_downloadedLength;
- (void)endBackgroundTask;
- (void)failToBeginFetchWithError:(id)arg1;
- (void)finishWithError:(id)arg1 shouldRetry:(_Bool)arg2;
- (void)forgetSessionIdentifierForFetcher;
- (void)forgetSessionIdentifierForFetcherWithoutSyncCheck;
@property _Bool hasLoggedError; // @synthesize hasLoggedError=_hasLoggedError;
- (_Bool)hasRetryAfterInterval;
- (id)init;
- (id)initWithRequest:(id)arg1;
- (id)initWithRequest:(id)arg1 configuration:(id)arg2;
@property(readonly) NSDate *initialBeginFetchDate; // @synthesize initialBeginFetchDate=_initialBeginFetchDate;
- (void)invokeFetchCallbacksOnCallbackQueueWithData:(id)arg1 error:(id)arg2;
- (void)invokeOnCallbackQueue:(id)arg1 afterUserStopped:(_Bool)arg2 block:(id)arg3;
- (void)invokeOnCallbackQueueAfterUserStopped:(_Bool)arg1 block:(id)arg2;
- (void)invokeOnCallbackQueueUnlessStopped:(id)arg1;
- (void)invokeOnCallbackUnsynchronizedQueueAfterUserStopped:(_Bool)arg1 block:(id)arg2;
@property(readonly, getter=isFetching) _Bool fetching;
@property(getter=isRetryEnabled) _Bool retryEnabled;
- (_Bool)isRetryEnabledUnsynchronized;
- (_Bool)isRetryError:(id)arg1;
@property(getter=isUsingBackgroundSession) _Bool usingBackgroundSession; // @synthesize usingBackgroundSession=_usingBackgroundSession;
@property(copy) NSString *log; // @synthesize log=_log;
- (void)logNowWithError:(id)arg1;
@property(copy) NSString *logRequestBody; // @synthesize logRequestBody=_logRequestBody;
@property(copy) NSString *logResponseBody; // @synthesize logResponseBody=_logResponseBody;
@property(readonly) NSData *loggedStreamData;
@property double maxRetryInterval;
@property double minRetryInterval;
@property(retain) NSMutableURLRequest *mutableRequest; // @synthesize mutableRequest=_request;
- (id)mutableRequestUnsynchronized;
@property(readonly) double nextRetryInterval;
- (double)nextRetryIntervalUnsynchronized;
- (void)postNotificationOnMainThreadWithName:(id)arg1 userInfo:(id)arg2 requireAsync:(_Bool)arg3;
@property(copy) NSDictionary *properties;
- (id)propertyForKey:(id)arg1;
@property(retain) NSURLCredential *proxyCredential; // @synthesize proxyCredential=_proxyCredential;
@property(copy) id receivedProgressBlock; // @synthesize receivedProgressBlock=_receivedProgressBlock;
@property(retain) NSURL *redirectedFromURL; // @synthesize redirectedFromURL=_redirectedFromURL;
- (void)releaseCallbacks;
- (void)removePersistedBackgroundSessionFromDefaults;
@property(readonly) NSURLResponse *response;
@property(readonly) NSDictionary *responseHeaders;
- (id)responseHeadersUnsynchronized;
- (id)responseUnsynchronized;
- (void)restoreDefaultStateForSessionIdentifierMetadata;
@property(copy) id resumeDataBlock; // @synthesize resumeDataBlock=_resumeDataBlock;
- (double)retryAfterInterval;
@property(copy) id retryBlock; // @synthesize retryBlock=_retryBlock;
@property(readonly) unsigned long long retryCount;
@property double retryFactor; // @synthesize retryFactor=_retryFactor;
- (void)retryFetch;
- (id)retryTimer;
- (void)retryTimerFired:(id)arg1;
@property(copy) id sendProgressBlock; // @synthesize sendProgressBlock=_sendProgressBlock;
- (void)sendStopNotificationIfNeeded;
@property(retain) id <GTMSessionFetcherServiceProtocol> service; // @synthesize service=_service;
@property(copy) NSString *serviceHost; // @synthesize serviceHost=_serviceHost;
@property long long servicePriority; // @synthesize servicePriority=_servicePriority;
@property(retain) NSURLSession *session;
@property(retain) NSOperationQueue *sessionDelegateQueue;
@property(readonly) NSString *sessionIdentifier;
- (id)sessionIdentifierDefaultMetadata;
- (id)sessionIdentifierMetadata;
- (id)sessionIdentifierMetadataUnsynchronized;
- (id)sessionNeedingInvalidation;
@property(readonly) NSURLSessionTask *sessionTask; // @synthesize sessionTask=_sessionTask;
@property(retain) NSDictionary *sessionUserInfo; // @synthesize sessionUserInfo=_sessionUserInfo;
- (void)setCanShareSession:(_Bool)arg1;
- (void)setCommentWithFormat:(id)arg1;
- (void)setDownloadedLength:(long long)arg1;
- (void)setProperty:(id)arg1 forKey:(id)arg2;
- (void)setResponse:(id)arg1;
- (void)setSessionIdentifier:(id)arg1;
- (void)setSessionNeedingInvalidation:(id)arg1;
- (void)setSessionTask:(id)arg1;
- (void)setStopNotificationNeeded:(_Bool)arg1;
- (void)setSystemCompletionHandler:(id)arg1;
@property(copy) NSString *taskDescription; // @synthesize taskDescription=_taskDescription;
@property float taskPriority; // @synthesize taskPriority=_taskPriority;
@property(copy) id testBlock; // @synthesize testBlock=_testBlock;
@property _Bool useBackgroundSession; // @synthesize useBackgroundSession=_userRequestedBackgroundSession;
@property _Bool useUploadTask; // @synthesize useUploadTask=_useUploadTask;
@property(retain) id userData;
@property(copy) id willCacheURLResponseBlock; // @synthesize willCacheURLResponseBlock=_willCacheURLResponseBlock;
@property(copy) id willRedirectBlock; // @synthesize willRedirectBlock=_willRedirectBlock;
- (_Bool)shouldReleaseCallbacksUponCompletion;
- (void)shouldRetryNowForStatus:(long long)arg1 error:(id)arg2 forceAssumeRetry:(_Bool)arg3 response:(id)arg4;
- (void)simulateByteTransferReportWithDataLength:(long long)arg1 block:(id)arg2;
- (void)simulateDataCallbacksForTestBlockWithBodyData:(id)arg1 response:(id)arg2 responseData:(id)arg3 error:(id)arg4;
- (void)simulateFetchForTestBlock;
@property(readonly) long long statusCode;
- (long long)statusCodeUnsynchronized;
- (void)stopFetchReleasingCallbacks:(_Bool)arg1;
- (void)stopFetching;
- (id)systemCompletionHandler;
- (_Bool)userStoppedFetching;
- (_Bool)waitForCompletionWithTimeout:(double)arg1;
@property(readonly) _Bool wasCreatedFromBackgroundSession; // @synthesize wasCreatedFromBackgroundSession=_wasCreatedFromBackgroundSession;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

